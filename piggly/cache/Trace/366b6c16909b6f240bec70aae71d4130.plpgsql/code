DECLARE
    startup  ALIAS FOR $1;
    shutdown ALIAS FOR $2;
    setup    ALIAS FOR $3;
    teardown ALIAS FOR $4;
    tests    ALIAS FOR $5;
    tap      TEXT;
    tfaild   INTEGER := 0;
    ffaild   INTEGER := 0;
    tnumb    INTEGER := 0;
    fnumb    INTEGER := 0;
    tok      BOOLEAN := TRUE;
BEGIN
    perform public.piggly_branch($PIGGLY$1cf42f5590eb95c2$PIGGLY$);
    BEGIN
        -- No plan support.
        perform public.piggly_branch($PIGGLY$441af6b4aef96508$PIGGLY$);
        PERFORM * FROM no_plan();
        FOR tap IN SELECT * FROM _runem(startup, false) LOOP perform public.piggly_cond($PIGGLY$1449e7ea9f3b9bb4$PIGGLY$, true);perform public.piggly_branch($PIGGLY$135213318585018c$PIGGLY$);perform public.piggly_branch($PIGGLY$8a4473eeb890c1c0$PIGGLY$);RETURN NEXT tap; perform public.piggly_signal($PIGGLY$1449e7ea9f3b9bb4$PIGGLY$, $PIGGLY$@$PIGGLY$);END LOOP;
perform public.piggly_cond($PIGGLY$1449e7ea9f3b9bb4$PIGGLY$, false);
    EXCEPTION
        -- Catch all exceptions and simply rethrow custom exceptions. This
        -- will roll back everything in the above block.
        WHEN raise_exception THEN perform public.piggly_branch($PIGGLY$b153012f76aacba3$PIGGLY$);perform public.piggly_branch($PIGGLY$2bb352d1b6fe80b9$PIGGLY$);RAISE EXCEPTION '%', SQLERRM;
    END;

    -- Record how startup tests have failed.
    tfaild := num_failed();

    FOR i IN 1..COALESCE(array_upper(tests, 1), 0) LOOP

        -- What subtest are we running?
        perform public.piggly_cond($PIGGLY$29b07bf59b37f019$PIGGLY$, true);
        perform public.piggly_branch($PIGGLY$41592a19ab3cb743$PIGGLY$);
        perform public.piggly_branch($PIGGLY$c777caca24b879cc$PIGGLY$);RETURN NEXT diag_test_name('Subtest: ' || tests[i]);

        -- Reset the results.
        tok := TRUE;
        tnumb := COALESCE(_get('curr_test'), 0);

        IF public.piggly_cond($PIGGLY$c0972c55cdc73931$PIGGLY$, (tnumb > 0)) THEN
            perform public.piggly_branch($PIGGLY$b2fb82e95f2125ba$PIGGLY$);
            EXECUTE 'ALTER SEQUENCE __tresults___numb_seq RESTART WITH 1';
            PERFORM _set('curr_test', 0);
            PERFORM _set('failed', 0);
        END IF;

        DECLARE
            errstate text;
            errmsg   text;
            detail   text;
            hint     text;
            context  text;
            schname  text;
            tabname  text;
            colname  text;
            chkname  text;
            typname  text;
        BEGIN
            perform public.piggly_branch($PIGGLY$c81776ba49cf1fc8$PIGGLY$);
            BEGIN
                -- Run the setup functions.
                perform public.piggly_branch($PIGGLY$0f2707906594a0c8$PIGGLY$);
                FOR tap IN SELECT * FROM _runem(setup, false) LOOP
                    perform public.piggly_cond($PIGGLY$fe0aea07d04d9f41$PIGGLY$, true);
                    perform public.piggly_branch($PIGGLY$874f88bb4eb18008$PIGGLY$);
                    perform public.piggly_branch($PIGGLY$7ee7747c6631bc0b$PIGGLY$);RETURN NEXT regexp_replace(tap, '^', '    ', 'gn');
                
                    perform public.piggly_signal($PIGGLY$fe0aea07d04d9f41$PIGGLY$, $PIGGLY$@$PIGGLY$);
                END LOOP;
perform public.piggly_cond($PIGGLY$fe0aea07d04d9f41$PIGGLY$, false);

                -- Run the actual test function.
                FOR tap IN EXECUTE 'SELECT * FROM ' || tests[i] || '()' LOOP
                    perform public.piggly_cond($PIGGLY$f3760bdd93edcf1f$PIGGLY$, true);
                    perform public.piggly_branch($PIGGLY$20b436ce0cc82248$PIGGLY$);
                    perform public.piggly_branch($PIGGLY$b6461cf1cebbbe04$PIGGLY$);RETURN NEXT regexp_replace(tap, '^', '    ', 'gn');
                
                    perform public.piggly_signal($PIGGLY$f3760bdd93edcf1f$PIGGLY$, $PIGGLY$@$PIGGLY$);
                END LOOP;
perform public.piggly_cond($PIGGLY$f3760bdd93edcf1f$PIGGLY$, false);

                -- Run the teardown functions.
                FOR tap IN SELECT * FROM _runem(teardown, false) LOOP
                    perform public.piggly_cond($PIGGLY$c8646bb1111758cd$PIGGLY$, true);
                    perform public.piggly_branch($PIGGLY$67e266ae5e7dbc52$PIGGLY$);
                    perform public.piggly_branch($PIGGLY$788af0fc7e022627$PIGGLY$);RETURN NEXT regexp_replace(tap, '^', '    ', 'gn');
                
                    perform public.piggly_signal($PIGGLY$c8646bb1111758cd$PIGGLY$, $PIGGLY$@$PIGGLY$);
                END LOOP;
perform public.piggly_cond($PIGGLY$c8646bb1111758cd$PIGGLY$, false);

                -- Emit the plan.
                fnumb := COALESCE(_get('curr_test'), 0);
                perform public.piggly_branch($PIGGLY$228fea042b956944$PIGGLY$);RETURN NEXT '    1..' || fnumb;

                -- Emit any error messages.
                IF public.piggly_cond($PIGGLY$b42e9d21bdb4fc97$PIGGLY$, (fnumb = 0)) THEN
                    perform public.piggly_branch($PIGGLY$1f203a7fe47198f2$PIGGLY$);
                    perform public.piggly_branch($PIGGLY$9412443c374bc52b$PIGGLY$);RETURN NEXT '    # No tests run!';
                    tok = false;
                ELSE
                    -- Report failures.
                    perform public.piggly_branch($PIGGLY$1cfcdb61e21566a8$PIGGLY$);
                    ffaild := num_failed();
                    IF public.piggly_cond($PIGGLY$78b1fdea8895246b$PIGGLY$, (ffaild > 0)) THEN
                        perform public.piggly_branch($PIGGLY$56286a64cc4934bd$PIGGLY$);
                        tok := FALSE;
                        perform public.piggly_branch($PIGGLY$971e92bd719f09f0$PIGGLY$);RETURN NEXT '    ' || diag(
                            'Looks like you failed ' || ffaild || ' test' ||
                             CASE ffaild WHEN 1 THEN '' ELSE 's' END
                             || ' of ' || fnumb
                        );
                    END IF;
                END IF;

            EXCEPTION WHEN OTHERS THEN
                -- Something went wrong. Record that fact.
                perform public.piggly_branch($PIGGLY$60026b53a1dcab0a$PIGGLY$);
                errstate := SQLSTATE;
                errmsg := SQLERRM;
                GET STACKED DIAGNOSTICS
                    detail  = PG_EXCEPTION_DETAIL,
                    hint    = PG_EXCEPTION_HINT,
                    context = PG_EXCEPTION_CONTEXT,
                    schname = SCHEMA_NAME,
                    tabname = TABLE_NAME,
                    colname = COLUMN_NAME,
                    chkname = CONSTRAINT_NAME,
                    typname = PG_DATATYPE_NAME;
            END;

            -- Always raise an exception to rollback any changes.
            perform public.piggly_branch($PIGGLY$3b910258d3cce9d5$PIGGLY$);RAISE EXCEPTION '__TAP_ROLLBACK__';

        EXCEPTION WHEN raise_exception THEN
            perform public.piggly_branch($PIGGLY$1bf940f2d477e62b$PIGGLY$);
            IF public.piggly_cond($PIGGLY$eb59a6715a773a9a$PIGGLY$, (errmsg IS NOT NULL)) THEN
                -- Something went wrong. Emit the error message.
                perform public.piggly_branch($PIGGLY$30f08f02d99d1faf$PIGGLY$);
                tok := FALSE;
               perform public.piggly_branch($PIGGLY$dc62656f0c63dd11$PIGGLY$);RETURN NEXT regexp_replace( diag('Test died: ' || _error_diag(
                   errstate, errmsg, detail, hint, context, schname, tabname, colname, chkname, typname
               )), '^', '    ', 'gn');
                errmsg := NULL;
            END IF;
        END;

        -- Restore the sequence.
        EXECUTE 'ALTER SEQUENCE __tresults___numb_seq RESTART WITH ' || tnumb + 1;
        PERFORM _set('curr_test', tnumb);
        PERFORM _set('failed', tfaild);

        -- Record this test.
        perform public.piggly_branch($PIGGLY$3117358e207357dd$PIGGLY$);RETURN NEXT ok(tok, tests[i]);
        IF public.piggly_cond($PIGGLY$933356e07ae37e63$PIGGLY$, (NOT tok)) THEN perform public.piggly_branch($PIGGLY$1d1ea4888783fb10$PIGGLY$);tfaild := tfaild + 1; END IF;

    
        perform public.piggly_signal($PIGGLY$29b07bf59b37f019$PIGGLY$, $PIGGLY$@$PIGGLY$);
    END LOOP;
perform public.piggly_cond($PIGGLY$29b07bf59b37f019$PIGGLY$, false);

    -- Run the shutdown functions.
    FOR tap IN SELECT * FROM _runem(shutdown, false) LOOP perform public.piggly_cond($PIGGLY$76796d8561c89159$PIGGLY$, true);perform public.piggly_branch($PIGGLY$4b09070f6b7200ad$PIGGLY$);perform public.piggly_branch($PIGGLY$217a86c5b345d897$PIGGLY$);RETURN NEXT tap; perform public.piggly_signal($PIGGLY$76796d8561c89159$PIGGLY$, $PIGGLY$@$PIGGLY$);END LOOP;
perform public.piggly_cond($PIGGLY$76796d8561c89159$PIGGLY$, false);

    -- Finish up.
    FOR tap IN SELECT * FROM _finish( COALESCE(_get('curr_test'), 0), 0, tfaild ) LOOP
        perform public.piggly_cond($PIGGLY$8055faf35f374661$PIGGLY$, true);
        perform public.piggly_branch($PIGGLY$fc49e0cb361f9b93$PIGGLY$);
        perform public.piggly_branch($PIGGLY$e625a59bac37d179$PIGGLY$);RETURN NEXT tap;
    
        perform public.piggly_signal($PIGGLY$8055faf35f374661$PIGGLY$, $PIGGLY$@$PIGGLY$);
    END LOOP;
perform public.piggly_cond($PIGGLY$8055faf35f374661$PIGGLY$, false);

    -- Clean up and return.
    PERFORM _cleanup();
    perform public.piggly_branch($PIGGLY$49d348905852aee1$PIGGLY$);RETURN;
END;