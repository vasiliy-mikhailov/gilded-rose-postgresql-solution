DECLARE
    startup  ALIAS FOR $1;
    shutdown ALIAS FOR $2;
    setup    ALIAS FOR $3;
    teardown ALIAS FOR $4;
    tests    ALIAS FOR $5;
    tap      TEXT;
    tfaild   INTEGER := 0;
    ffaild   INTEGER := 0;
    tnumb    INTEGER := 0;
    fnumb    INTEGER := 0;
    tok      BOOLEAN := TRUE;
BEGIN
    perform public.piggly_branch($PIGGLY$081a61e496c82c45$PIGGLY$);
    BEGIN
        -- No plan support.
        perform public.piggly_branch($PIGGLY$06ee209a30fa95b2$PIGGLY$);
        PERFORM * FROM no_plan();
        FOR tap IN SELECT * FROM _runem(startup, false) LOOP perform public.piggly_cond($PIGGLY$5defd1d18ad62c81$PIGGLY$, true);perform public.piggly_branch($PIGGLY$5c89892a38952bab$PIGGLY$);perform public.piggly_branch($PIGGLY$4e0891b7f4ff5d9b$PIGGLY$);RETURN NEXT tap; perform public.piggly_signal($PIGGLY$5defd1d18ad62c81$PIGGLY$, $PIGGLY$@$PIGGLY$);END LOOP;
perform public.piggly_cond($PIGGLY$5defd1d18ad62c81$PIGGLY$, false);
    EXCEPTION
        -- Catch all exceptions and simply rethrow custom exceptions. This
        -- will roll back everything in the above block.
        WHEN raise_exception THEN perform public.piggly_branch($PIGGLY$d17a639ef56f7127$PIGGLY$);perform public.piggly_branch($PIGGLY$b879505104dae89d$PIGGLY$);RAISE EXCEPTION '%', SQLERRM;
    END;

    -- Record how startup tests have failed.
    tfaild := num_failed();

    FOR i IN 1..COALESCE(array_upper(tests, 1), 0) LOOP

        -- What subtest are we running?
        perform public.piggly_cond($PIGGLY$9545d27b45daed64$PIGGLY$, true);
        perform public.piggly_branch($PIGGLY$d61f6204a5065921$PIGGLY$);
        perform public.piggly_branch($PIGGLY$4e7851cc806668e8$PIGGLY$);RETURN NEXT diag_test_name('Subtest: ' || tests[i]);

        -- Reset the results.
        tok := TRUE;
        tnumb := COALESCE(_get('curr_test'), 0);

        IF public.piggly_cond($PIGGLY$5e40ff15fe9cf5e9$PIGGLY$, (tnumb > 0)) THEN
            perform public.piggly_branch($PIGGLY$aad43dd70005a8cf$PIGGLY$);
            EXECUTE 'ALTER SEQUENCE __tresults___numb_seq RESTART WITH 1';
            PERFORM _set('curr_test', 0);
            PERFORM _set('failed', 0);
        END IF;

        DECLARE
            errstate text;
            errmsg   text;
            detail   text;
            hint     text;
            context  text;
            schname  text;
            tabname  text;
            colname  text;
            chkname  text;
            typname  text;
        BEGIN
            perform public.piggly_branch($PIGGLY$19d1dcff52286ccc$PIGGLY$);
            BEGIN
                -- Run the setup functions.
                perform public.piggly_branch($PIGGLY$6b1a79b8931d75d2$PIGGLY$);
                FOR tap IN SELECT * FROM _runem(setup, false) LOOP
                    perform public.piggly_cond($PIGGLY$bb93f8403c0b3cb1$PIGGLY$, true);
                    perform public.piggly_branch($PIGGLY$4f3675a0f2e9f1ee$PIGGLY$);
                    perform public.piggly_branch($PIGGLY$3808e773c0c2811e$PIGGLY$);RETURN NEXT regexp_replace(tap, '^', '    ', 'gn');
                
                    perform public.piggly_signal($PIGGLY$bb93f8403c0b3cb1$PIGGLY$, $PIGGLY$@$PIGGLY$);
                END LOOP;
perform public.piggly_cond($PIGGLY$bb93f8403c0b3cb1$PIGGLY$, false);

                -- Run the actual test function.
                FOR tap IN EXECUTE 'SELECT * FROM ' || tests[i] || '()' LOOP
                    perform public.piggly_cond($PIGGLY$4df39709d5beedb2$PIGGLY$, true);
                    perform public.piggly_branch($PIGGLY$d4264938e8560f16$PIGGLY$);
                    perform public.piggly_branch($PIGGLY$f8f431fd20b5883f$PIGGLY$);RETURN NEXT regexp_replace(tap, '^', '    ', 'gn');
                
                    perform public.piggly_signal($PIGGLY$4df39709d5beedb2$PIGGLY$, $PIGGLY$@$PIGGLY$);
                END LOOP;
perform public.piggly_cond($PIGGLY$4df39709d5beedb2$PIGGLY$, false);

                -- Run the teardown functions.
                FOR tap IN SELECT * FROM _runem(teardown, false) LOOP
                    perform public.piggly_cond($PIGGLY$535c617a461397ba$PIGGLY$, true);
                    perform public.piggly_branch($PIGGLY$0a68eabe88aadd69$PIGGLY$);
                    perform public.piggly_branch($PIGGLY$aa45c433cff081c6$PIGGLY$);RETURN NEXT regexp_replace(tap, '^', '    ', 'gn');
                
                    perform public.piggly_signal($PIGGLY$535c617a461397ba$PIGGLY$, $PIGGLY$@$PIGGLY$);
                END LOOP;
perform public.piggly_cond($PIGGLY$535c617a461397ba$PIGGLY$, false);

                -- Emit the plan.
                fnumb := COALESCE(_get('curr_test'), 0);
                perform public.piggly_branch($PIGGLY$363ba9de87d02034$PIGGLY$);RETURN NEXT '    1..' || fnumb;

                -- Emit any error messages.
                IF public.piggly_cond($PIGGLY$c3b403a478864fee$PIGGLY$, (fnumb = 0)) THEN
                    perform public.piggly_branch($PIGGLY$d7397585a9b9c7c9$PIGGLY$);
                    perform public.piggly_branch($PIGGLY$d2595de1e8fc7e69$PIGGLY$);RETURN NEXT '    # No tests run!';
                    tok = false;
                ELSE
                    -- Report failures.
                    perform public.piggly_branch($PIGGLY$f159179c62e58dec$PIGGLY$);
                    ffaild := num_failed();
                    IF public.piggly_cond($PIGGLY$974c870695a660a1$PIGGLY$, (ffaild > 0)) THEN
                        perform public.piggly_branch($PIGGLY$9370e51d26848987$PIGGLY$);
                        tok := FALSE;
                        perform public.piggly_branch($PIGGLY$d203c69a4643a80c$PIGGLY$);RETURN NEXT '    ' || diag(
                            'Looks like you failed ' || ffaild || ' test' ||
                             CASE ffaild WHEN 1 THEN '' ELSE 's' END
                             || ' of ' || fnumb
                        );
                    END IF;
                END IF;

            EXCEPTION WHEN OTHERS THEN
                -- Something went wrong. Record that fact.
                perform public.piggly_branch($PIGGLY$a69f79a177e24f2c$PIGGLY$);
                errstate := SQLSTATE;
                errmsg := SQLERRM;
                GET STACKED DIAGNOSTICS
                    detail  = PG_EXCEPTION_DETAIL,
                    hint    = PG_EXCEPTION_HINT,
                    context = PG_EXCEPTION_CONTEXT,
                    schname = SCHEMA_NAME,
                    tabname = TABLE_NAME,
                    colname = COLUMN_NAME,
                    chkname = CONSTRAINT_NAME,
                    typname = PG_DATATYPE_NAME;
            END;

            -- Always raise an exception to rollback any changes.
            perform public.piggly_branch($PIGGLY$04127241876f8eca$PIGGLY$);RAISE EXCEPTION '__TAP_ROLLBACK__';

        EXCEPTION WHEN raise_exception THEN
            perform public.piggly_branch($PIGGLY$12b4d1920172afaa$PIGGLY$);
            IF public.piggly_cond($PIGGLY$d66176dbc9c5e608$PIGGLY$, (errmsg IS NOT NULL)) THEN
                -- Something went wrong. Emit the error message.
                perform public.piggly_branch($PIGGLY$b299dfe82194982d$PIGGLY$);
                tok := FALSE;
               perform public.piggly_branch($PIGGLY$43057d2507c4b4af$PIGGLY$);RETURN NEXT regexp_replace( diag('Test died: ' || _error_diag(
                   errstate, errmsg, detail, hint, context, schname, tabname, colname, chkname, typname
               )), '^', '    ', 'gn');
                errmsg := NULL;
            END IF;
        END;

        -- Restore the sequence.
        EXECUTE 'ALTER SEQUENCE __tresults___numb_seq RESTART WITH ' || tnumb + 1;
        PERFORM _set('curr_test', tnumb);
        PERFORM _set('failed', tfaild);

        -- Record this test.
        perform public.piggly_branch($PIGGLY$a27cfb893c4943ac$PIGGLY$);RETURN NEXT ok(tok, tests[i]);
        IF public.piggly_cond($PIGGLY$19eef6736f88e0d8$PIGGLY$, (NOT tok)) THEN perform public.piggly_branch($PIGGLY$6a40922f407fb7ab$PIGGLY$);tfaild := tfaild + 1; END IF;

    
        perform public.piggly_signal($PIGGLY$9545d27b45daed64$PIGGLY$, $PIGGLY$@$PIGGLY$);
    END LOOP;
perform public.piggly_cond($PIGGLY$9545d27b45daed64$PIGGLY$, false);

    -- Run the shutdown functions.
    FOR tap IN SELECT * FROM _runem(shutdown, false) LOOP perform public.piggly_cond($PIGGLY$008b8459c96be68d$PIGGLY$, true);perform public.piggly_branch($PIGGLY$e678c01a7097623c$PIGGLY$);perform public.piggly_branch($PIGGLY$58f4f681e78791a2$PIGGLY$);RETURN NEXT tap; perform public.piggly_signal($PIGGLY$008b8459c96be68d$PIGGLY$, $PIGGLY$@$PIGGLY$);END LOOP;
perform public.piggly_cond($PIGGLY$008b8459c96be68d$PIGGLY$, false);

    -- Finish up.
    FOR tap IN SELECT * FROM _finish( COALESCE(_get('curr_test'), 0), 0, tfaild ) LOOP
        perform public.piggly_cond($PIGGLY$dbad2531c7ca99c3$PIGGLY$, true);
        perform public.piggly_branch($PIGGLY$b3ee1c3e9f0110fa$PIGGLY$);
        perform public.piggly_branch($PIGGLY$ecba882cefb933ac$PIGGLY$);RETURN NEXT tap;
    
        perform public.piggly_signal($PIGGLY$dbad2531c7ca99c3$PIGGLY$, $PIGGLY$@$PIGGLY$);
    END LOOP;
perform public.piggly_cond($PIGGLY$dbad2531c7ca99c3$PIGGLY$, false);

    -- Clean up and return.
    PERFORM _cleanup();
    perform public.piggly_branch($PIGGLY$29902d3b9347b95a$PIGGLY$);RETURN;
END;