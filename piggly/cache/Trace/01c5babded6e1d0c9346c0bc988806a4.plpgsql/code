DECLARE
    have       ALIAS FOR $1;
    want       ALIAS FOR $2;
    have_rec   RECORD;
    want_rec   RECORD;
    have_found BOOLEAN;
    want_found BOOLEAN;
    rownum     INTEGER := 1;
    err_msg    text := 'details not available in pg <= 9.1';
BEGIN
    perform public.piggly_branch($PIGGLY$180a711c1a5924f6$PIGGLY$);
    FETCH have INTO have_rec;
    have_found := FOUND;
    FETCH want INTO want_rec;
    want_found := FOUND;
    WHILE public.piggly_cond($PIGGLY$f367358be449d847$PIGGLY$, (have_found OR want_found)) LOOP
        perform public.piggly_branch($PIGGLY$11ce946b6dc9aaa8$PIGGLY$);
        IF public.piggly_cond($PIGGLY$0b5dc8d32063aa80$PIGGLY$, (have_rec IS DISTINCT FROM want_rec OR have_found <> want_found)) THEN
            perform public.piggly_branch($PIGGLY$1404bdffc52d62c3$PIGGLY$);
            perform public.piggly_branch($PIGGLY$812873dd43c6c9f7$PIGGLY$);RETURN ok( false, $3 ) || E'\n' || diag(
                '    Results differ beginning at row ' || rownum || E':\n' ||
                '        have: ' || CASE WHEN have_found THEN have_rec::text ELSE 'NULL' END || E'\n' ||
                '        want: ' || CASE WHEN want_found THEN want_rec::text ELSE 'NULL' END
            );
        END IF;
        rownum = rownum + 1;
        FETCH have INTO have_rec;
        have_found := FOUND;
        FETCH want INTO want_rec;
        want_found := FOUND;
    END LOOP;

    perform public.piggly_branch($PIGGLY$3c83dd799607e919$PIGGLY$);RETURN ok( true, $3 );
EXCEPTION
    WHEN datatype_mismatch THEN
        perform public.piggly_branch($PIGGLY$dfbb4bbf24b628a4$PIGGLY$);
        GET STACKED DIAGNOSTICS err_msg = MESSAGE_TEXT;
        perform public.piggly_branch($PIGGLY$cfaa59b7164c9580$PIGGLY$);RETURN ok( false, $3 ) || E'\n' || diag(
            E'    Number of columns or their types differ between the queries' ||
            CASE WHEN have_rec::TEXT = want_rec::text THEN '' ELSE E':\n' ||
                '        have: ' || CASE WHEN have_found THEN have_rec::text ELSE 'NULL' END || E'\n' ||
                '        want: ' || CASE WHEN want_found THEN want_rec::text ELSE 'NULL' END
            END || E'\n        ERROR: ' || err_msg
        );
END;